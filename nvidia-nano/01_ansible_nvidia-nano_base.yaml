---

- name: Set up root access
  ansible.builtin.import_playbook: root_access.yaml
  
- name: Check Jetpack version
  hosts: root
  tasks:
    - name: Update repositories cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Register jetpack version
      command: apt-cache show nvidia-jetpack
      register: jetpackVer

    - name: Test for Jetpack 4.4.1
      fail: msg="The wrong version of Jetpack was flashed. I want jetpack 4.4.1"
      when: not ('4.4.1' in jetpackVer.stdout)

- name: Set Up Extra Drive
  hosts: root
  vars_prompt:
    - name: Connect Drive
      prompt: Please connect your usb drive to the nano. When ready press enter
      private: no

  tasks:
    - name: Read {{ ext_drive_dev }} device information
      parted: device="{{ ext_drive_dev }}" unit=MiB
      register: sda_info

    - name: Print {{ ext_drive_dev }} device information
      ansible.builtin.debug:
        msg: "{{sda_info}}"

    - name: Disable {{ ext_drive_dev }} swap partitions
      shell: swapoff {{ ext_drive_dev }}{{ item.num }}
      args:
        executable: /bin/bash
      loop: "{{ sda_info.partitions }}"
      when: item.fstype is search("linux-swap")

    # - name: Unmount {{ ext_drive_dev }} partitions test
    #   ansible.posix.mount:
    #     path: "{{ item.name }}"
    #     state: unmounted
    #   with_items:
    #     - { name: "/tmp/j" }
    #     - { name: "/media/plugin-data" }

    # TODO: figure out how to unmount the /dev/ with shell unmount command
    # TODO: then run a fstab to clear out the partitions instead of parted
    # TODO: try the mount command (mabye) to clear out the fstab file

    # - name: Unmount {{ ext_drive_dev }} partitions
    #   ansible.posix.mount:
    #     path: "{{ ext_drive_dev }}{{ item.num }}"
    #     state: absent
    #   loop: "{{ sda_info.partitions }}"
    #   when: item.fstype is not search("linux-swap")

    # TODO: figure out how to disable auto-mount which causes this to fail
    - name: Remove all partitions from {{ ext_drive_dev }}
      parted:
        device: "{{ ext_drive_dev }}"
        number: "{{ item.num }}"
        state: absent
      loop: "{{ sda_info.partitions }}"

    - name: Clear the current partition table and create GPT table
      shell: >
        (echo "g";
         sleep 5s;
         echo "w"
        ) | fdisk --wipe always --wipe-partitions always {{ ext_drive_dev }}
      args:
        executable: /bin/bash

    - name: Create swap partition
      shell: >
        (echo "n";
         echo "{{ item.num }}";
         echo "";
         echo "{{ item.lsector }}";
         echo "t";
         echo "{{ item.type }}";
         sleep 5s;
         echo "w"
        ) | fdisk --wipe always --wipe-partitions always {{ ext_drive_dev }}
      args:
        executable: /bin/bash
      with_items:
        - { num: 1, lsector: +16G, type: 19 }

    - name: Create drive partitions
      shell: >
        (echo "n";
         echo "{{ item.num }}";
         echo "";
         echo "{{ item.lsector }}";
         sleep 5s;
         echo "w"
        ) | fdisk --wipe always --wipe-partitions always {{ ext_drive_dev }}
      args:
        executable: /bin/bash
      with_items:
        - { num: 2, lsector: +32G}
        - { num: 3, lsector: ""}

    - name: Format the swap partition
      shell: mkswap {{ ext_drive_dev }}1 -L ext-swap
      args:
        executable: /bin/bash

    - name: Format (ext4) drive partitions
      community.general.filesystem:
        fstype: ext4
        force: yes
        dev: "{{ ext_drive_dev }}{{ item.num }}"
      with_items:
        - { num: 2 }
        - { num: 3 }

    - name: Label the partitions
      shell: e2label {{ ext_drive_dev }}{{ item.num }} {{ item.label }}
      args:
        executable: /bin/bash
      with_items:
        - { num: 2, label: system-data }
        - { num: 3, label: plugin-data }

    - name: Populate the fstab file
      ansible.posix.mount:
        path: "{{ item.path }}"
        src: "{{ ext_drive_dev }}{{ item.num }}"
        fstype: "{{ item.fstype }}"
        opts: "{{ item.opts }}"
        dump: "0"
        passno: "{{ item.passno }}"
        state: present
        boot: yes
      with_items:
        - { num: 1, path: "swap", fstype: swap, opts: "defaults,nofail", passno: "0" }
        - { num: 3, path: "/media/plugin-data", fstype: ext4, opts: "defaults,nofail,x-systemd.after=local-fs-pre.target,x-systemd.before=local-fs.target", passno: "2" }

    - name: Unconditionally reboot the machine to mount partitions
      ansible.builtin.reboot:

- name: Install Tools
  hosts: root
  tasks:
    - name: install helpful tools
      ansible.builtin.apt:
        pkg:
          - dnsutils
          - htop
          - iftop
          - iotop
          - jq
          - nmap
          - curl
          - python3-click
          - dnsmasq

    - name: Install K3s via curl
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.20.2+k3s1 INSTALL_K3S_SKIP_ENABLE=true K3S_CLUSTER_SECRET=4tX0DUZ0uQknRtVUAKjt sh -
      args:
        executable: /bin/bash

    - name: Install the waggle-nodeid tool
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-nodeid/releases/download/v1.0.7/waggle-nodeid_1.0.7_all.deb

    - name: Install waggle-node-hostname #the tool is used for a work around to change the hostname
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-node-hostname/releases/download/v1.2.1/waggle-node-hostname_1.2.1_all.deb

    - name: Install waggle-commontools to read the config
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-common-tools/releases/download/v1.0.0/waggle-common-tools_1.0.0_all.deb

    - name: Install Internet sharing service # Install waggle common tools first it is depended on it
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-internet-share/releases/download/v1.4.1/waggle-internet-share_1.4.1_all.deb

    - name: Install the registration service
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-bk-registration/releases/download/v2.2.2/waggle-bk-registration_2.2.2_all.deb

    - name: Install the reverse tunnel service
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-bk-reverse-tunnel/releases/download/v2.3.2/waggle-bk-reverse-tunnel_2.3.2_all.deb

- name: Remove Uneeded Items
  hosts: root
  tasks:
    - name: Remove packages
      ansible.builtin.apt:
        name: isc-dhcp-server, whoopsie
        state: absent
        purge: yes

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes

    - name: Disable apt-daily service
      ansible.builtin.systemd:
        name: apt-daily.service
        enabled: no

    - name: Disable apt-daily timer
      ansible.builtin.systemd:
        name: apt-daily.timer
        enabled: no

    - name: Disable apt-daily-upgrade service
      ansible.builtin.systemd:
        name: apt-daily-upgrade.service
        enabled: no

    - name: Disable apt-daily-upgrade timer
      ansible.builtin.systemd:
        name: apt-daily-upgrade.timer
        enabled: no

    - name: Remove excutable permissions to update motd directory files
      ansible.builtin.file:
        path: /etc/update-motd.d
        state: directory
        mode: a-x
        recurse: yes

    - name: Add enabled=0 to motd news file
      shell: echo 'ENABLED=0' > /etc/default/motd-news
      args:
        executable: /bin/bash

    - name: Disable motd news service
      ansible.builtin.systemd:
        name: motd-news.service
        enabled: no

    - name: Disable motd news timer
      ansible.builtin.systemd:
        name: motd-news.timer
        enabled: no

- name: Copy ROOTFS into the System
  hosts: root
  tasks:
    - name: Add the WaggleOS MOTD
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/update-motd.d/05-waggle"
        dest: /etc/update-motd.d/05-waggle
        mode: a+x

    - name: Configure the Network Interface, Udev Rules
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/udev/rules.d/10-waggle.rules"
        dest: /etc/udev/rules.d/10-waggle.rules

    - name: create the journal log folder if it does not exist
      ansible.builtin.file:
        path: /var/log/journal
        state: directory

    - name: Create journalctl config directory if it does not exist
      ansible.builtin.file:
        path: /etc/systemd/journald.conf.d
        state: directory

    - name: add the journalctl config to configure journalctl to save historical logs
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/systemd/journald.conf.d/10-waggle-journald.conf"
        dest: /etc/systemd/journald.conf.d/10-waggle-journald.conf

    - name: Configure Network Manager to Not Manage the k3s Networks
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/NetworkManager/conf.d/cni.conf"
        dest: /etc/NetworkManager/conf.d/cni.conf

    - name: Set up k3s Shutdown Service
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/systemd/system/waggle-k3s-shutdown.service"
        dest: /etc/systemd/system/waggle-k3s-shutdown.service

    - name: Copy directory /ROOTFS/etc/waggle to system
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/waggle"
        dest: /etc

    - name: Configure the lan0 network interface to bind to 10.31.81.1
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/lan"
        dest: /etc/NetworkManager/system-connections/lan
        mode: 0600

    - name: Configure the wan0 network interface
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wan"
        dest: /etc/NetworkManager/system-connections/wan
        mode: 0600

    - name: Configure the wifi network interface
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wifi"
        dest: /etc/NetworkManager/system-connections/wifi
        mode: 0600

    - name: Configure dnsmasq to create the device's internal 10.31.81.1/24 network (for use by kubernetes) by copying 10-waggle-base config file.
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/dnsmasq.d/10-waggle-base.conf"
        dest: /etc/dnsmasq.d/10-waggle-base.conf

    - name: Configure dnsmasq to create the device's internal 10.31.81.1/24 network by copying dnsmasq.service.d directory.
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/systemd/system/dnsmasq.service.d"
        dest: /etc/systemd/system

    - name: Set up k3s service override
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/systemd/system/k3s.service.d"
        dest: /etc/systemd/system

    - name: Setup the local docker registry mirrors (as the k3s config uses them)
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/systemd/system/waggle-registry-local.service"
        dest: /etc/systemd/system/waggle-registry-local.service

    - name: Add fallback DNS
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/systemd/resolved.conf.d/10-waggle-resolved.conf"
        dest: /etc/systemd/resolved.conf.d/10-waggle-resolved.conf

    - name: Add wifi dongle support by copying ROOTFS/etc/udev/rules.d/10-waggle.rules to system
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/udev/rules.d/10-waggle.rules"
        dest: /etc/udev/rules.d/10-waggle.rules

    - name: Add wifi dongle support by copying ROOTFS/etc/modprobe.d/rtl8821cu.conf to system
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/modprobe.d/rtl8821cu.conf"
        dest: /etc/modprobe.d/rtl8821cu.conf

    - name: Add wifi dongle support by copying ROOTFS/etc/modprobe.d/rtl8822bu.conf to system
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/modprobe.d/rtl8822bu.conf"
        dest: /etc/modprobe.d/rtl8822bu.conf

    - name: Add waggle hotspot support by copying ROOTFS/etc/NetworkManager/system-connections/wifi-waggle to system
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wifi-waggle"
        dest: /etc/NetworkManager/system-connections/wifi-waggle

    - name: Enable NetworkManager Connectivity checks by copying ROOTFS/etc/NetworkManager/conf.d/99-connectivity.conf to system
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/NetworkManager/conf.d/99-connectivity.conf"
        dest: /etc/NetworkManager/conf.d/99-connectivity.conf

    - name: Add ssh known hosts to system
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/ssh/ssh_known_hosts"
        dest: /etc/ssh/ssh_known_hosts

    - name: Reload Daemon
      ansible.builtin.systemd:
        daemon_reload: yes

- name: Configure Docker to use External Media
  hosts: root
  tasks:
    #Filesystem gets created when docker's first command is ran
    - name: Start up docker to create filesystem
      shell: docker --version
      args:
        executable: /bin/bash

    - name: Stop docker
      ansible.builtin.systemd:
        name: docker
        state: stopped

    - name: Move docker
      shell: mv /var/lib/docker /media/plugin-data/
      args:
        executable: /bin/bash

    - name: Create a symbolic link
      ansible.builtin.file:
        src: /media/plugin-data/docker/
        dest: /var/lib/docker
        state: link

    - name: Start up docker
      ansible.builtin.systemd:
        name: docker
        state: started

- name: Configure k3s to Use External Media
  hosts: root
  tasks:
    - name: Create external media directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        recurse: yes
      with_items:
        - { path: "/media/plugin-data/k3s/etc/rancher" }
        - { path: "/media/plugin-data/k3s/kubelet" }
        - { path: "/media/plugin-data/k3s/rancher" }

    - name: Ensure symlink destinations don't exist
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      with_items:
        - { path: "/etc/rancher" }
        - { path: "/var/lib/kubelet" }
        - { path: "/var/lib/rancher" }

    - name: Create external media symlinks
      ansible.builtin.file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        force: yes
        state: link
      with_items:
        - { src: "/media/plugin-data/k3s/etc/rancher", dest: "/etc/rancher" }
        - { src: "/media/plugin-data/k3s/kubelet", dest: "/var/lib/kubelet" }
        - { src: "/media/plugin-data/k3s/rancher", dest: "/var/lib/rancher" }

- name: k3s Service Startup Customizations
  hosts: root
  vars_prompt:
    - name: Connect lan0
      prompt: Please connect your camera via the usb dongle for ethernet connection. When ready press enter
      private: no

  tasks:
    - name: Reload Daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable k3s Shutdown Service
      ansible.builtin.systemd:
        name: waggle-k3s-shutdown
        enabled: yes
        state: started

    ### Start of work around ### - work around will be changed later
    - name: Unconditionally reboot the machine with all defaults
      ansible.builtin.reboot: # reboot to create /etc/waggle/node-id file from waggle-nodeid service

    - name: Create /etc/waggle/bk_key.pem file
      ansible.builtin.file:
        path: /etc/waggle/bk_key.pem
        state: touch

    - name: Run waggle node hostname python script
      shell: /usr/bin/waggle_node_hostname.py -n /etc/waggle/node-id
      args:
        executable: /bin/bash

    - name: Remove /etc/waggle/bk_key.pem file
      ansible.builtin.file:
        path: /etc/waggle/bk_key.pem
        state: absent

    - name: Unconditionally reboot the machine with all defaults # reboot is required for the hostname to change
      ansible.builtin.reboot:
    ### end of work around #####

    - name: Configure k3s GPU access by applying executable permissions to pre-run.sh
      ansible.builtin.file:
        path: /etc/waggle/k3s_config/pre-run.sh
        mode: a+x

    - name: Enable k3s
      ansible.builtin.systemd:
        name: k3s.service
        enabled: yes
        state: started

- name: Configure The Local Dev Docker Registry
  hosts: root
  tasks:
    - name: apply 600 permissions to Local Dev Docker Registry domain crt
      ansible.builtin.file:
        path: /etc/waggle/docker/certs/domain.crt
        mode: 0600

    - name: apply 600 permissions to Local Dev Docker Registry domain key
      ansible.builtin.file:
        path: /etc/waggle/docker/certs/domain.key
        mode: 0600

    - name: Create local dev docker registry directory
      ansible.builtin.file:
        path: /etc/docker/certs.d/10.31.81.1:5000
        state: directory
        recurse: yes

    - name: Copy domain crt to local dev docker registry directory
      ansible.builtin.copy:
        src: /etc/waggle/docker/certs/domain.crt
        dest: /etc/docker/certs.d/10.31.81.1:5000/
        remote_src: yes
        mode: 0600

    - name: Create ca-certificate directory
      ansible.builtin.file:
        path: /usr/local/share/ca-certificates
        state: directory
        recurse: yes

    - name: Copy domain.crt to ca-certificates directory
      ansible.builtin.copy:
        src: /etc/waggle/docker/certs/domain.crt
        dest: /usr/local/share/ca-certificates/docker.crt
        remote_src: yes
        mode: 0600

    - name: Update Certificates
      shell: update-ca-certificates
      args:
        executable: /bin/bash

    - name: Make the directories for the docker registries
      ansible.builtin.file:
        path: /media/plugin-data/docker_registry/local
        state: directory
        recurse: yes

    - name: Reload Daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable waggle registry local service
      ansible.builtin.systemd:
        name: waggle-registry-local.service
        enabled: yes
        state: started

- name: Add waggle hotspot support
  hosts: root
  tasks:
    # Note: the device will auto-connect to a ssid: waggle / passwd: Why1Not@Waggle network now
    - name: Apply 600 permission to system-connections
      ansible.builtin.file:
        path: /etc/NetworkManager/system-connections
        state: directory
        mode: 0600
        recurse: yes

- name: Enable NetworkManager Connectivity checks
  hosts: root
  tasks:
    - name: Checking for 'net.ipv4.conf.default.rp_filter = 2' in /etc/sysctl.conf file
      shell: cat /etc/sysctl.conf | grep 'net.ipv4.conf.default.rp_filter = 2' | wc -l
      args:
        executable: /bin/bash
      register: sysctlconf_default_output

    - name: Add line in /etc/sysctl.conf file
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.conf.default.rp_filter = 2"
      when: sysctlconf_default_output.stdout == "0"

    - name: Checking for 'net.ipv4.conf.all.rp_filter = 2' in /etc/sysctl.conf file
      shell: cat /etc/sysctl.conf | grep 'net.ipv4.conf.all.rp_filter = 2' | wc -l
      args:
        executable: /bin/bash
      register: sysctlconf_all_output

    - name: Add line in /etc/sysctl.conf file
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.conf.all.rp_filter = 2"
      when: sysctlconf_all_output.stdout == "0"

#Note: the below instructions hard-code a static VSN. In the future we will want to generate a random VSN (NXXX where X is a [0-9A-Z]) (TODO)
- name: Set the node friendly ID (VSN)
  hosts: root
  tasks:
    - name: Hard-code a static VSN
      shell: echo N001 > /etc/waggle/vsn
      args:
        executable: /bin/bash

    - name: Get Node ID #file lookup plugin doesnt work because the file is in the client not in host
      slurp: #method to get file contents from client (content is in base64)
        src: /etc/waggle/node-id
      register: remote_content_encoded

    - name: Decode Remote Content
      set_fact:
        Node_ID: "{{remote_content_encoded.content | b64decode}}"

    - name: Output Node ID #Give user their node id
      debug:
        msg: "Node ID: {{Node_ID}}"

- name: Register node and establish connection to Beehive
  hosts: root
  vars_prompt:
    - name: Node Registration
      prompt: Please register your node in https://portal.sagecontinuum.org/my-devices, when you are finish you will receive registration.zip. Place registration.zip in the same location this playbook is sitting in (i.e. /node-platforms/nvidia-nano/). When you are done press enter
      private: no

  tasks:
    - name: Copy the Beekeeper known hosts public CA
      ansible.builtin.copy:
        src: "{{ playbook_dir }}/ROOTFS/etc/ssh/ssh_known_hosts"
        dest: /etc/ssh/ssh_known_hosts
        mode: 0644

    - name: Enable waggle admin reverse tunnel access
      ansible.builtin.blockinfile:
        marker: "# <-- {mark} ANSIBLE MANAGED BLOCK - Enable Waggle Admin Reverse Tunnel Access -->"
        path: /root/.ssh/authorized_keys
        block: "{{ lookup('ansible.builtin.file', '{{ playbook_dir }}/ROOTFS/root/.ssh/authorized_keys.prod') }}"

    - name: Unzip registration files into the node
      ansible.builtin.unarchive:
        src: "{{ playbook_dir }}/registration.zip"
        dest: /etc/waggle
        mode: 0600

    - name: Conclusion
      debug:
        msg: "The node is now configured for WES. Give the node a couple of minutes to register. After registration, the Beehive should automatically push WES to the node and start running its pods"
