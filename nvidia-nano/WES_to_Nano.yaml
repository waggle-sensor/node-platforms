---
#break up && to seperate tasks
- name: Check Jetpack version
  hosts: all
  tasks:
    - name: Register jetpack version
      command: apt-cache show nvidia-jetpack
      register: jetpackVer

    - name: Test for Jetpack 4.4.1
      fail: msg="The wrong version of Jetpack was flashed. I want jetpack 4.4.1"
      when: not ('4.4.1' in jetpackVer.stdout)

- name: Set Up Extra Drive
  hosts: all
  tasks:
    - name: Clear the current partition table and create GPT table
      shell: echo -e "g\nw" | fdisk --wipe always --wipe-partitions always /dev/sda #Can't use parted module because it has issues clearing partitions in use
      args:
        executable: /bin/bash

    - name: Reboot to clear old-partition table #this task helps clear the disk of all partitions to eliminate all errors dealing with 'partitions in use'
      ansible.builtin.reboot:

    - name: Make the SWAP partition (16GB SWAP) #Can't create swap partition with parted module so use shell command
      shell: echo -e "n\n1\n2048\n+16G\nt\n19\nw" | fdisk --wipe always --wipe-partitions always /dev/sda
      args:
        executable: /bin/bash

    - name: Make the overlayfs 32GB
      community.general.parted:
        device: /dev/sda
        number: 2
        state: present
        label: gpt
        name: system-data
        part_start: 17.2GB
        part_end: 51.5GB
        unit: GB
        fs_type: ext4

    - name: Make the plugin-data (the rest of the space)
      community.general.parted:
        device: /dev/sda
        number: 3
        state: present
        label: gpt
        name: plugin-data
        part_start: 51.5GB       
        part_end: 100%
        unit: GB
        fs_type: ext4

    - name: Turn on the swap
      shell: mkswap /dev/sda1 -L ext-swap
      args:
        executable: /bin/bash

    - name: checking for swap in the startup partition file
      shell: cat /etc/fstab | grep /dev/sda1 | wc -l
      args:
        executable: /bin/bash
      register: swap_output

    - name: Put the swap in the startup partition file
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "/dev/sda1 swap swap defaults,nofail 0 0"
      when: swap_output.stdout == "0"

    - name: checking for plugin-data in the startup partition file
      shell: cat /etc/fstab | grep /dev/sda3 | wc -l
      args:
        executable: /bin/bash
      register: pluginData_output

    - name: Put plugin-data in the startup partition file
      ansible.builtin.lineinfile:
        path: /etc/fstab
        line: "/dev/sda3 /media/plugin-data ext4 defaults,nofail,x-systemd.after=local-fs-pre.target,x-systemd.before=local-fs.target 0 2"
      when: pluginData_output.stdout == "0"

    # - name: Setup the overlayfs partition
    #   shell: mkfs.ext4 /dev/sda2 && e2label /dev/sda2 system-data
    #   args:
    #     executable: /bin/bash

    # - name: Set the default mount of /media/plugin-data in the /etc/fstab
    #   shell: mkfs.ext4 /dev/sda3 && e2label /dev/sda3 plugin-data 
    #   args:
    #     executable: /bin/bash

    # - name: Unconditionally reboot the machine with all defaults
    #   ansible.builtin.reboot:

- name: Install Tools
  hosts: all
  tasks:
    - name: install helpful tools
      ansible.builtin.apt:
        name: dnsutils, htop, iftop, iotop, jq, nmap, curl, python3-click, dnsmasq, 
        update_cache: yes
        state: build-dep

    - name: Install K3s via curl
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.20.2+k3s1 INSTALL_K3S_SKIP_ENABLE=true K3S_CLUSTER_SECRET=4tX0DUZ0uQknRtVUAKjt sh -
      args:
        executable: /bin/bash

    - name: Install the waggle-nodeid tool
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-nodeid/releases/download/v1.0.7/waggle-nodeid_1.0.7_all.deb

    - name: Install waggle-node-hostname #the tool is used for a work around to change the hostname 
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-node-hostname/releases/download/v1.2.1/waggle-node-hostname_1.2.1_all.deb
  
    - name: Install waggle-commontools to read the config
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-common-tools/releases/download/v1.0.0/waggle-common-tools_1.0.0_all.deb

    - name: Install Internet sharing service # Install waggle common tools first it is depended on it
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-internet-share/releases/download/v1.4.1/waggle-internet-share_1.4.1_all.deb

    - name: Install the registration service
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-bk-registration/releases/download/v2.2.2/waggle-bk-registration_2.2.2_all.deb

    - name: Install the reverse tunnel service
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-bk-reverse-tunnel/releases/download/v2.3.2/waggle-bk-reverse-tunnel_2.3.2_all.deb

- name: Remove Uneeded Items
  hosts: all
  tasks:

    - name: Remove packages
      ansible.builtin.apt:
        name: isc-dhcp-server, whoopsie
        state: absent
        purge: yes

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes

    - name: Disable apt upgrade services
      shell: systemctl disable apt-daily.service && systemctl disable apt-daily.timer && systemctl disable apt-daily-upgrade.service && systemctl disable apt-daily-upgrade.timer
      args:
        executable: /bin/bash

    - name: Disable the motd news updates
      shell: chmod -x /etc/update-motd.d/* && echo 'ENABLED=0' > /etc/default/motd-news && systemctl disable motd-news.service && systemctl disable motd-news.timer
      args:
        executable: /bin/bash

- name: Copy ROOTFS into the System
  hosts: all
  tasks:
    - name: Add the WaggleOS MOTD
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/update-motd.d/05-waggle'
        dest: /etc/update-motd.d/05-waggle
        mode: a+x
    
    - name: Configure the Network Interface, Udev Rules
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/udev/rules.d/10-waggle.rules'
        dest: /etc/udev/rules.d/10-waggle.rules

    - name: create the journal log folder if it does not exist
      ansible.builtin.file:
        path: /var/log/journal
        state: directory
        recurse: yes

    - name: Create journalctl config directory if it does not exist
      ansible.builtin.file:
        path: /etc/systemd/journald.conf.d
        state: directory
        recurse: yes

    - name: add the journalctl config to configure journalctl to save historical logs
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/journald.conf.d/10-waggle-journald.conf'
        dest: /etc/systemd/journald.conf.d/10-waggle-journald.conf

    - name: Configure Network Manager to Not Manage the k3s Networks
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/conf.d/cni.conf'
        dest: /etc/NetworkManager/conf.d/cni.conf

    - name: Set up k3s Shutdown Service
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/system/waggle-k3s-shutdown.service'
        dest: /etc/systemd/system/waggle-k3s-shutdown.service
       
    - name: Copy directory /ROOTFS/etc/waggle to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/waggle'
        dest: /etc/waggle

    - name: Configure the lan0 network interface to bind to 10.31.81.1
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/lan'
        dest: /etc/NetworkManager/system-connections/lan
        mode: 0600

    - name: Configure the wan0 network interface
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wan'
        dest: /etc/NetworkManager/system-connections/wan
        mode: 0600

    - name: Configure the wifi network interface
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wifi'
        dest: /etc/NetworkManager/system-connections/wifi
        mode: 0600
 
    - name: Configure dnsmasq to create the device's internal 10.31.81.1/24 network (for use by kubernetes) by copying 10-waggle-base config file.
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/dnsmasq.d/10-waggle-base.conf'
        dest: /etc/dnsmasq.d/10-waggle-base.conf

    - name: Configure dnsmasq to create the device's internal 10.31.81.1/24 network by copying dnsmasq.service.d directory.
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/system/dnsmasq.service.d'
        dest: /etc/systemd/system/dnsmasq.service.d

    - name: Set up k3s service override
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/system/k3s.service.d'
        dest: /etc/systemd/system/k3s.service.d

    - name: Setup the local docker registry mirrors (as the k3s config uses them)
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/system/waggle-registry-local.service'
        dest: /etc/systemd/system/waggle-registry-local.service

    - name: Add fallback DNS
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/resolved.conf.d/10-waggle-resolved.conf'
        dest: /etc/systemd/resolved.conf.d/10-waggle-resolved.conf

    - name: Add wifi dongle support by copying ROOTFS/etc/udev/rules.d/10-waggle.rules to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/udev/rules.d/10-waggle.rules'
        dest: /etc/udev/rules.d/10-waggle.rules

    - name: Add wifi dongle support by copying ROOTFS/etc/modprobe.d/rtl8821cu.conf to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/modprobe.d/rtl8821cu.conf'
        dest: /etc/modprobe.d/rtl8821cu.conf

    - name: Add wifi dongle support by copying ROOTFS/etc/modprobe.d/rtl8822bu.conf to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/modprobe.d/rtl8822bu.conf'
        dest: /etc/modprobe.d/rtl8822bu.conf

    - name: Add waggle hotspot support by copying ROOTFS/etc/NetworkManager/system-connections/wifi-waggle to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wifi-waggle'
        dest: /etc/NetworkManager/system-connections/wifi-waggle

    - name: Enable NetworkManager Connectivity checks by copying ROOTFS/etc/NetworkManager/conf.d/99-connectivity.conf to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/conf.d/99-connectivity.conf'
        dest: /etc/NetworkManager/conf.d/99-connectivity.conf


   - name: Reload Daemon
      shell: systemctl daemon-reload
      args:
        executable: /bin/bash

    - name: Unconditionally reboot the machine with all defaults
      ansible.builtin.reboot:


- name: Configure Docker to use External Media
  hosts: all
  tasks:
    - name: Stop docker
      shell: service docker stop
      args:
        executable: /bin/bash
#Filesystem gets created when docker is started up
    - name: Start up docker to create filesystem
      shell: service docker start
      args:
        executable: /bin/bash

    - name: Stop docker
      shell: service docker stop
      args:
        executable: /bin/bash

    - name: Move docker
      shell: mv /var/lib/docker /media/plugin-data/
      args:
        executable: /bin/bash

    - name: Create a symbolic link
      shell: ln -s /media/plugin-data/docker/ /var/lib/docker
      args:
        executable: /bin/bash

    - name: Start up docker
      shell: service docker start
      args:
        executable: /bin/bash

- name: Configure k3s to Use External Media
  hosts: all
  tasks:
  #delete the bottom two task no need to check
    - name: Register service k3s var
      ignore_errors: yes # ignore service not active error
      command: service k3s status
      register: k3s_service

    - name: Check for k3s
      fail: msg="k3s service is not found"
      when: k3s_service.stdout.find("inactive") == 0

    - name: create the neccessary directories in the external media
      shell: mkdir -p /media/plugin-data/k3s/etc/rancher && mkdir -p /media/plugin-data/k3s/kubelet && mkdir -p /media/plugin-data/k3s/rancher
      args:
        executable: /bin/bash

    - name: create symbolic links in the newly created directories
      shell: ln -s /media/plugin-data/k3s/etc/rancher /etc/rancher && ln -s /media/plugin-data/k3s/kubelet /var/lib/kubelet && ln -s /media/plugin-data/k3s/rancher /var/lib/rancher
      args:
        executable: /bin/bash
#move enable after k3s customization
    - name: Enable k3s
      command: systemctl enable k3s.service
      register: k3s_output

    - name: Check for K3s Output
      fail: msg="symlinks were not created"
      when: k3s_output.stdout.find("Created") == 0


- name: k3s Service Startup Customizations
  hosts: all
  tasks:
    - name: Enable k3s Shutdown Service
      shell: systemctl daemon-reload && systemctl enable waggle-k3s-shutdown
      args:
        executable: /bin/bash

    - name: Run Commands to rename hostname #the task is a work around will be changed later
      shell: touch /etc/waggle/bk_key.pem && /usr/bin/waggle_node_hostname.py -n /etc/waggle/node-id && rm /etc/waggle/bk_key.pem
      args:
        executable: /bin/bash

#Check if reboot is neccessary for hostname to change
    # - name: Unconditionally reboot the machine with all defaults
    #   ansible.builtin.reboot:

    - name: Configure k3s GPU access by applying executable permissions to pre-run.sh
      ansible.builtin.file: 
        path: /etc/waggle/k3s_config/pre-run.sh
        mode: a+x

#remove test gpu access not needed
- name: Test k3s and Docker's GPU Access
  hosts: all
  tasks:
    - name: Register k3s service override
      command: service k3s status && systemctl cat k3s
      register: k3s_service_output

    - name: Test lan and wan are connected before testing k3s service
      fail:
        msg="The k3s service failed make sure you have lan0 and wan0 connected. The ethernet dongle connected to a usb port
        (this is what you connect the camera to) and your uplink (to network switch) plugged into the nano ethernet port."
      when: ('7538 ExecStartPre=/usr/bin/nmcli conn up lan (code=exited, status=4)' in k3s_service_output.stdout)

    - name: Test k3s service override
      fail: msg="The k3s service failed"
      when: not ('running' in k3s_service_output.stdout)

    - name: Register k3s Node
      command: kubectl get node
      register: k3s_node_output

    - name: Test k3s and run basic pod
      fail: msg="The node status is not ready"
      when: not ('Ready' in k3s_node_output.stdout)

    - name: Test dnsmasq
      shell: service dnsmasq status
      args:
        executable: /bin/bash

    - name: Pull docker GPU stress test image
      shell: docker pull waggle/gpu-stress-test:1.0.1
      args:
        executable: /bin/bash

    - name: Test docker's gpu access
      shell: docker run -it --rm --runtime nvidia --network host waggle/gpu-stress-test:1.0.1 -m 2
      args:
        executable: /bin/bash

- name: Configure The Local Dev Docker Registry
  hosts: all
  tasks:
    - name: apply 600 permissions to Local Dev Docker Registry domain key and crt
      ansible.builtin.file:
        path: /etc/waggle/docker/certs/domain.*
        mode: 0600

    - name: Create local dev docker registry directory
      ansible.builtin.file:
        path: /etc/docker/certs.d/10.31.81.1\:5000/
        state: directory
        recurse: yes

    - name: Copy domain crt to local dev docker registry directory
      ansible.builtin.copy:
        src: /etc/waggle/docker/certs/domain.crt
        dest: /etc/docker/certs.d/10.31.81.1\:5000/
        remote_src: yes
        mode: 0600

    - name: Create ca-certificate directory
      ansible.builtin.file:
        path: /usr/local/share/ca-certificates
        state: directory
        recurse: yes
    
    - name: Copy domain.crt to ca-certificates directory
      ansible.builtin.copy:
        src: /etc/waggle/docker/certs/domain.crt
        dest: /usr/local/share/ca-certificates/docker.crt
        remote_src: yes
        mode: 0600

    - name: Update Certificates
      shell: update-ca-certificates
      args:
        executable: /bin/bash

    - name: Make the directories for the docker registries
      ansible.builtin.file:
        path: /media/plugin-data/docker_registry/local
        state: directory
        recurse: yes

    - name: Enable the docker registry services
      shell: systemctl daemon-reload && systemctl start waggle-registry-local.service && systemctl enable waggle-registry-local.service
      args:
        executable: /bin/bash

    - name: push and pull from local registry
      shell: docker pull ubuntu:latest && docker tag ubuntu:latest 10.31.81.1:5000/joe:latest && curl https://10.31.81.1:5000/v2/_catalog && docker push 10.31.81.1:5000/joe:latest
      args:
        executable: /bin/bash

    - name: Register local dev docker registry
      command: curl https://10.31.81.1:5000/v2/_catalog
      register: localdev_output

    - name: Test the local dev docker registry
      fail: msg="The local dev docker registry failed"
      when: not ('joe' in localdev_output)

- name: Add waggle hotspot support
  hosts: all
  tasks:

    # Note: the device will auto-connect to a ssid: waggle / passwd: Why1Not@Waggle network now
    - name: Apply 600 permission to system-connections
      ansible.builtin.file:
        path: /etc/NetworkManager/system-connections/*
        mode: 0600

- name: Enable NetworkManager Connectivity checks
  hosts: all
  tasks:

    - name: Ensure that default ip route that is used actually has an Internet connection
      shell: echo 'net.ipv4.conf.default.rp_filter = 2' >> /etc/sysctl.conf && echo 'net.ipv4.conf.all.rp_filter = 2' >> /etc/sysctl.conf
      args:
        executable: /bin/bash

#Note: the below instructions hard-code a static VSN. In the future we will want to generate a random VSN (NXXX where X is a [0-9A-Z]) (TODO)
- name: Set the node friendly ID (VSN)
  hosts: all
  tasks:
    - name: Hard-code a static VSN
      shell: echo N001 > /etc/waggle/vsn
      args:
        executable: /bin/bash



# - name: Register node and establish connection to Beehive
#   hosts: all
#   tasks:

#     - name: Copy the Beekeeper known hosts public CA
#       shell: cp -r /platforms/nvidia-nano/ROOTFS/etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts && chmod 644 /etc/ssh/ssh_known_hosts
#       args:
#         executable: /bin/bash

# # note: this file is not checked into the code at this time, need to triple-check its safe to do so. (TODO)
#     # - name: Copy registration private key
#     #   shell: cp -r /platforms/nvidia-nano/ROOTFS/etc/waggle/sage_registration /etc/waggle/sage_registration && chmod 600 /etc/waggle/sage_registration
#     #   args:
#     #     executable: /bin/bash

