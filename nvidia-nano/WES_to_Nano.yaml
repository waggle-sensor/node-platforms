---
- name: Check Jetpack version
  hosts: all
  tasks:
    - name: Update repositories cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Register jetpack version
      command: apt-cache show nvidia-jetpack
      register: jetpackVer

    - name: Test for Jetpack 4.4.1
      fail: msg="The wrong version of Jetpack was flashed. I want jetpack 4.4.1"
      when: not ('4.4.1' in jetpackVer.stdout)

- name: Set Up Extra Drive
  hosts: all
  tasks:
    - name: Clear the current partition table and create GPT table
      shell: echo -e "g\nw" | fdisk --wipe always --wipe-partitions always /dev/sda #Can't use parted module because it has issues clearing partitions in use
      args:
        executable: /bin/bash

    - name: Make the SWAP partition (16GB SWAP) #Can't create swap partition with parted module so use shell command
      shell: echo -e "n\n1\n2048\n+16G\nt\n19\nw" | fdisk --wipe always --wipe-partitions always /dev/sda
      args:
        executable: /bin/bash

    - name: Make the overlayfs 32GB
      community.general.parted:
        device: /dev/sda
        number: 2
        state: present
        label: gpt
        name: system-data
        part_start: 17.2GB
        part_end: 51.5GB
        unit: GB
        fs_type: ext4

    - name: Make the plugin-data (the rest of the space)
      community.general.parted:
        device: /dev/sda
        number: 3
        state: present
        label: gpt
        name: plugin-data
        part_start: 51.5GB       
        part_end: 100%
        unit: GB
        fs_type: ext4

    - name: Create a ext4 filesystem on /dev/sda2
      community.general.filesystem:
        fstype: ext4
        dev: /dev/sda2

    - name: Create a ext4 filesystem on /dev/sda3
      community.general.filesystem:
        fstype: ext4
        dev: /dev/sda3

    - name: Unmount /dev/sda1 #Unmount this partition so that mkswap can run
      ansible.posix.mount:
        path: /dev/sda1
        state: unmounted

    # - name: Unmount /dev/sda1
    #   shell: umount -l /dev/sda1 && umount -f /media
    #   args:
    #     executable: /bin/bash

    - name: Turn on the swap
      shell: mkswap /dev/sda1 -L ext-swap
      args:
        executable: /bin/bash

    - name: Put the swap in the startup partition file #table structure: /dev/sda1 swap swap defaults,nofail 0 0
      ansible.posix.mount:
        path: swap
        src: /dev/sda1
        fstype: swap
        opts: defaults,nofail
        dump: 0
        passno: 0
        state: present
        boot: yes
#The nano fails to start up because sda2 fails to mount
#tried adding it to partition file and now it says file system check failed
    - name: Put system-data in the startup partition file #*temporary*
      ansible.posix.mount:
        path: /media/system-data
        src: /dev/sda2
        fstype: ext4
        opts: defaults,nofail,x-systemd.after=local-fs-pre.target,x-systemd.before=local-fs.target
        dump: 0
        passno: 2
        state: present
        boot: yes

    - name: Put plugin-data in the startup partition file #table structure: /dev/sda3 /media/plugin-data ext4 defaults,nofail,x-systemd.after=local-fs-pre.target,x-systemd.before=local-fs.target 0 2
      ansible.posix.mount:
        path: /media/plugin-data
        src: /dev/sda3
        fstype: ext4
        opts: defaults,nofail,x-systemd.after=local-fs-pre.target,x-systemd.before=local-fs.target
        dump: 0
        passno: 2
        state: present
        boot: yes

    - name: Unconditionally reboot the machine with all defaults
      ansible.builtin.reboot: # reboot to mount sda3 (tried mounting without rebooting and kept running into errors)

- name: Install Tools
  hosts: all
  tasks:
    - name: install helpful tools
      ansible.builtin.apt:
        pkg:
        - dnsutils
        - htop
        - iftop
        - iotop
        - jq
        - nmap
        - curl
        - python3-click
        - dnsmasq

    - name: Install K3s via curl
      shell: curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION=v1.20.2+k3s1 INSTALL_K3S_SKIP_ENABLE=true K3S_CLUSTER_SECRET=4tX0DUZ0uQknRtVUAKjt sh -
      args:
        executable: /bin/bash

    - name: Install the waggle-nodeid tool
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-nodeid/releases/download/v1.0.7/waggle-nodeid_1.0.7_all.deb

    - name: Install waggle-node-hostname #the tool is used for a work around to change the hostname 
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-node-hostname/releases/download/v1.2.1/waggle-node-hostname_1.2.1_all.deb
  
    - name: Install waggle-commontools to read the config
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-common-tools/releases/download/v1.0.0/waggle-common-tools_1.0.0_all.deb

    - name: Install Internet sharing service # Install waggle common tools first it is depended on it
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-internet-share/releases/download/v1.4.1/waggle-internet-share_1.4.1_all.deb

    - name: Install the registration service
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-bk-registration/releases/download/v2.2.2/waggle-bk-registration_2.2.2_all.deb

    - name: Install the reverse tunnel service
      ansible.builtin.apt:
        deb: https://github.com/waggle-sensor/waggle-bk-reverse-tunnel/releases/download/v2.3.2/waggle-bk-reverse-tunnel_2.3.2_all.deb

- name: Remove Uneeded Items
  hosts: all
  tasks:
    - name: Remove packages
      ansible.builtin.apt:
        name: isc-dhcp-server, whoopsie
        state: absent
        purge: yes

    - name: Remove dependencies that are no longer required
      ansible.builtin.apt:
        autoremove: yes

    - name: Disable apt-daily service
      ansible.builtin.systemd:
        name: apt-daily.service
        enabled: no
    
    - name: Disable apt-daily timer
      ansible.builtin.systemd:
        name: apt-daily.timer
        enabled: no

    - name: Disable apt-daily-upgrade service
      ansible.builtin.systemd:
        name: apt-daily-upgrade.service
        enabled: no 

    - name: Disable apt-daily-upgrade timer
      ansible.builtin.systemd:
        name: apt-daily-upgrade.timer
        enabled: no 

    - name: Remove excutable permissions to update motd directory files
      ansible.builtin.file:
        path: /etc/update-motd.d
        state: directory
        mode: a-x 
        recurse: yes

    - name: Add enabled=0 to motd news file
      shell: echo 'ENABLED=0' > /etc/default/motd-news #could not find module that will replace all file content with new content
      args:
        executable: /bin/bash

    - name: Disable motd news service
      ansible.builtin.systemd:
        name: motd-news.service
        enabled: no

    - name: Disable motd news timer
      ansible.builtin.systemd:
        name: motd-news.timer
        enabled: no

- name: Copy ROOTFS into the System
  hosts: all
  tasks:
    - name: Add the WaggleOS MOTD
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/update-motd.d/05-waggle'
        dest: /etc/update-motd.d/05-waggle
        mode: a+x
    
    - name: Configure the Network Interface, Udev Rules
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/udev/rules.d/10-waggle.rules'
        dest: /etc/udev/rules.d/10-waggle.rules

    - name: create the journal log folder if it does not exist
      ansible.builtin.file:
        path: /var/log/journal
        state: directory

    - name: Create journalctl config directory if it does not exist
      ansible.builtin.file:
        path: /etc/systemd/journald.conf.d
        state: directory

    - name: add the journalctl config to configure journalctl to save historical logs
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/journald.conf.d/10-waggle-journald.conf'
        dest: /etc/systemd/journald.conf.d/10-waggle-journald.conf

    - name: Configure Network Manager to Not Manage the k3s Networks
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/conf.d/cni.conf'
        dest: /etc/NetworkManager/conf.d/cni.conf

    - name: Set up k3s Shutdown Service
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/system/waggle-k3s-shutdown.service'
        dest: /etc/systemd/system/waggle-k3s-shutdown.service
       
    - name: Copy directory /ROOTFS/etc/waggle to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/waggle'
        dest: /etc

    - name: Configure the lan0 network interface to bind to 10.31.81.1
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/lan'
        dest: /etc/NetworkManager/system-connections/lan
        mode: 0600

    - name: Configure the wan0 network interface
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wan'
        dest: /etc/NetworkManager/system-connections/wan
        mode: 0600

    - name: Configure the wifi network interface
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wifi'
        dest: /etc/NetworkManager/system-connections/wifi
        mode: 0600
 
    - name: Configure dnsmasq to create the device's internal 10.31.81.1/24 network (for use by kubernetes) by copying 10-waggle-base config file.
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/dnsmasq.d/10-waggle-base.conf'
        dest: /etc/dnsmasq.d/10-waggle-base.conf

    - name: Configure dnsmasq to create the device's internal 10.31.81.1/24 network by copying dnsmasq.service.d directory.
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/system/dnsmasq.service.d'
        dest: /etc/systemd/system

    - name: Set up k3s service override
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/system/k3s.service.d'
        dest: /etc/systemd/system

    - name: Setup the local docker registry mirrors (as the k3s config uses them)
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/system/waggle-registry-local.service'
        dest: /etc/systemd/system/waggle-registry-local.service

    - name: Add fallback DNS
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/systemd/resolved.conf.d/10-waggle-resolved.conf'
        dest: /etc/systemd/resolved.conf.d/10-waggle-resolved.conf

    - name: Add wifi dongle support by copying ROOTFS/etc/udev/rules.d/10-waggle.rules to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/udev/rules.d/10-waggle.rules'
        dest: /etc/udev/rules.d/10-waggle.rules

    - name: Add wifi dongle support by copying ROOTFS/etc/modprobe.d/rtl8821cu.conf to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/modprobe.d/rtl8821cu.conf'
        dest: /etc/modprobe.d/rtl8821cu.conf

    - name: Add wifi dongle support by copying ROOTFS/etc/modprobe.d/rtl8822bu.conf to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/modprobe.d/rtl8822bu.conf'
        dest: /etc/modprobe.d/rtl8822bu.conf

    - name: Add waggle hotspot support by copying ROOTFS/etc/NetworkManager/system-connections/wifi-waggle to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/system-connections/wifi-waggle'
        dest: /etc/NetworkManager/system-connections/wifi-waggle

    - name: Enable NetworkManager Connectivity checks by copying ROOTFS/etc/NetworkManager/conf.d/99-connectivity.conf to system
      ansible.builtin.copy:
        src: '{{ playbook_dir }}/ROOTFS/etc/NetworkManager/conf.d/99-connectivity.conf'
        dest: /etc/NetworkManager/conf.d/99-connectivity.conf

    - name: Reload Daemon
      ansible.builtin.systemd:
        daemon_reload: yes

- name: Configure Docker to use External Media
  hosts: all
  tasks:
#Filesystem gets created when docker's first command is ran
    - name: Start up docker to create filesystem
      shell: docker --version
      args:
        executable: /bin/bash

    - name: Stop docker
      ansible.builtin.systemd:
        name: docker
        state: stopped

    - name: Move docker
      shell: mv /var/lib/docker /media/plugin-data/ #no built in module that will move files
      args:
        executable: /bin/bash

    - name: Create a symbolic link
      ansible.builtin.file:
        src: /media/plugin-data/docker/
        dest: /var/lib/docker
        state: link
    
    - name: Start up docker
      ansible.builtin.systemd:
        name: docker
        state: started

- name: Configure k3s to Use External Media
  hosts: all
  tasks:
  #delete the bottom two task no need to check
    - name: Register service k3s var
      ignore_errors: yes # ignore service not active error
      command: service k3s status
      register: k3s_service

    - name: Check for k3s
      fail: msg="k3s service is not found"
      when: k3s_service.stdout.find("inactive") == 0

    - name: Create etc/rancher directory if it does not exist
      ansible.builtin.file:
        path: /media/plugin-data/k3s/etc/rancher
        state: directory
        recurse: yes

    - name: Create kubelet directory if it does not exist
      ansible.builtin.file:
        path: /media/plugin-data/k3s/kubelet
        state: directory
        recurse: yes

    - name: Create k3s/rancher directory if it does not exist
      ansible.builtin.file:
        path: /media/plugin-data/k3s/rancher
        state: directory
        recurse: yes

    - name: Create a etc/rancher symbolic link
      ansible.builtin.file:
        src: /media/plugin-data/k3s/etc/rancher
        dest: /etc/rancher
        state: link

    - name: Create a kubelet symbolic link
      ansible.builtin.file:
        src: /media/plugin-data/k3s/kubelet
        dest: /var/lib/kubelet
        state: link

    - name: Create a k3s/rancher symbolic link
      ansible.builtin.file:
        src: /media/plugin-data/k3s/rancher
        dest: /var/lib/rancher
        state: link

- name: k3s Service Startup Customizations
  hosts: all
  vars_prompt:

    - name: Connect lan0
      prompt: Please connect your camera via the usb dongle for ethernet connection. When ready enter any character and press enter.
      private: no
      
  tasks:
    - name: Reload Daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable k3s Shutdown Service
      ansible.builtin.systemd:
        name: waggle-k3s-shutdown
        enabled: yes
        state: started

# The bottom five tasks are a work around - will be changed later
    - name: Unconditionally reboot the machine with all defaults
      ansible.builtin.reboot: # reboot to create /etc/waggle/node-id file from waggle-nodeid service

    - name: Create /etc/waggle/bk_key.pem file
      ansible.builtin.file:
        path: /etc/waggle/bk_key.pem
        state: touch

    - name: Run waggle node hostname python script
      shell: /usr/bin/waggle_node_hostname.py -n /etc/waggle/node-id
      args:
        executable: /bin/bash

    - name: Remove /etc/waggle/bk_key.pem file
      ansible.builtin.file:
        path: /etc/waggle/bk_key.pem
        state: absent

    - name: Unconditionally reboot the machine with all defaults # reboot is required for the hostname to change
      ansible.builtin.reboot:

    - name: Configure k3s GPU access by applying executable permissions to pre-run.sh
      ansible.builtin.file: 
        path: /etc/waggle/k3s_config/pre-run.sh
        mode: a+x

    - name: Enable k3s
      ansible.builtin.systemd:
        name: k3s.service
        enabled: yes
        state: started

- name: Configure The Local Dev Docker Registry
  hosts: all
  tasks:
    - name: apply 600 permissions to Local Dev Docker Registry domain crt
      ansible.builtin.file:
        path: /etc/waggle/docker/certs/domain.crt
        mode: 0600

    - name: apply 600 permissions to Local Dev Docker Registry domain key
      ansible.builtin.file:
        path: /etc/waggle/docker/certs/domain.key
        mode: 0600

    - name: Create local dev docker registry directory
      ansible.builtin.file:
        path: /etc/docker/certs.d/10.31.81.1:5000
        state: directory
        recurse: yes

    - name: Copy domain crt to local dev docker registry directory
      ansible.builtin.copy:
        src: /etc/waggle/docker/certs/domain.crt
        dest: /etc/docker/certs.d/10.31.81.1:5000/
        remote_src: yes
        mode: 0600

    - name: Create ca-certificate directory
      ansible.builtin.file:
        path: /usr/local/share/ca-certificates
        state: directory
        recurse: yes
    
    - name: Copy domain.crt to ca-certificates directory
      ansible.builtin.copy:
        src: /etc/waggle/docker/certs/domain.crt
        dest: /usr/local/share/ca-certificates/docker.crt
        remote_src: yes
        mode: 0600

    - name: Update Certificates
      shell: update-ca-certificates
      args:
        executable: /bin/bash

    - name: Make the directories for the docker registries
      ansible.builtin.file:
        path: /media/plugin-data/docker_registry/local
        state: directory
        recurse: yes

    - name: Reload Daemon
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: Enable waggle registry local service
      ansible.builtin.systemd:
        name: waggle-registry-local.service
        enabled: yes
        state: started

- name: Add waggle hotspot support
  hosts: all
  tasks:

    # Note: the device will auto-connect to a ssid: waggle / passwd: Why1Not@Waggle network now
    - name: Apply 600 permission to system-connections
      ansible.builtin.file:
        path: /etc/NetworkManager/system-connections
        state: directory
        mode: 0600
        recurse: yes

- name: Enable NetworkManager Connectivity checks
  hosts: all
  tasks:

    - name: Checking for 'net.ipv4.conf.default.rp_filter = 2' in /etc/sysctl.conf file
      shell: cat /etc/sysctl.conf | grep 'net.ipv4.conf.default.rp_filter = 2' | wc -l
      args:
        executable: /bin/bash
      register: sysctlconf_default_output

    - name: Add line in /etc/sysctl.conf file
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.conf.default.rp_filter = 2"
      when: sysctlconf_default_output.stdout == "0"

    - name: Checking for 'net.ipv4.conf.all.rp_filter = 2' in /etc/sysctl.conf file
      shell: cat /etc/sysctl.conf | grep 'net.ipv4.conf.all.rp_filter = 2' | wc -l
      args:
        executable: /bin/bash
      register: sysctlconf_all_output

    - name: Add line in /etc/sysctl.conf file
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.conf.all.rp_filter = 2"
      when: sysctlconf_all_output.stdout == "0"

#Note: the below instructions hard-code a static VSN. In the future we will want to generate a random VSN (NXXX where X is a [0-9A-Z]) (TODO)
- name: Set the node friendly ID (VSN)
  hosts: all
  tasks:
    - name: Hard-code a static VSN
      shell: echo N001 > /etc/waggle/vsn
      args:
        executable: /bin/bash



# - name: Register node and establish connection to Beehive
#   hosts: all
#   tasks:

#     - name: Copy the Beekeeper known hosts public CA
#       shell: cp -r /platforms/nvidia-nano/ROOTFS/etc/ssh/ssh_known_hosts /etc/ssh/ssh_known_hosts && chmod 644 /etc/ssh/ssh_known_hosts
#       args:
#         executable: /bin/bash

# # note: this file is not checked into the code at this time, need to triple-check its safe to do so. (TODO)
#     # - name: Copy registration private key
#     #   shell: cp -r /platforms/nvidia-nano/ROOTFS/etc/waggle/sage_registration /etc/waggle/sage_registration && chmod 600 /etc/waggle/sage_registration
#     #   args:
#     #     executable: /bin/bash

